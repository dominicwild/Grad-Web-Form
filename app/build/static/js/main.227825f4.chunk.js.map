{"version":3,"sources":["img/DXC_Technology_logo.svg","components/Login.jsx","components/Form.jsx","components/List.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","login","a","username","document","getElementById","value","password","console","log","props","success","navigate","className","htmlFor","type","id","name","onClick","this","src","logo","Component","Form","getUserLocation","navigator","geolocation","getCurrentPosition","location","c","coords","locations","state","latitude","longitude","accuracy","forEach","d","distance","setTimeout","coordFrom","coordTo","lat1","lat2","lon1","lon2","dLat","Math","PI","dLon","sin","cos","atan2","sqrt","round","getGenders","fetch","then","res","ok","json","error","statusText","genders","setState","getStudyFields","studyFields","getStreams","streams","getLocations","renderSelect","labelText","defaultOptionText","list","disabled","undefined","defaultValue","map","key","submit","event","checkValidity","firstName","lastName","GenderId","email","mobile","StudyFieldId","StreamId","method","headers","body","JSON","stringify","toastr","data","clear","e","preventDefault","checked","onSubmit","required","href","App","credentials","credential","catch","err","store","path","timeOut","newestOnTop","preventDuplicates","position","getState","transitionIn","transitionOut","progressBar","closeOnToastrClick","Boolean","window","hostname","match","reducers","toastrReducer","reducer","combineReducers","createStore","ReactDOM","render","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.227825f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DXC_Technology_logo.eef67b5f.svg\";","import React, { Component } from \"react\";\r\nimport \"../css/Login.css\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport logo from \"../img/DXC_Technology_logo.svg\";\r\nimport { navigate } from \"@reach/router\";\r\n\r\nclass Login extends Component {\r\n  login = async () => {\r\n    const username = document.getElementById(\"username\").value;\r\n    const password = document.getElementById(\"password\").value;\r\n\r\n    console.log({ username, password });\r\n    const success = await this.props.login({ username, password });\r\n    console.log(`Success: ${success}`);\r\n    if (success) {\r\n      navigate(\"/form\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"background\">\r\n        <div className=\"login\">\r\n          <div>\r\n            <h1>DXC Beacon Login</h1>\r\n            <div className=\"inputs\">\r\n              <div>\r\n                <label htmlFor=\"username\">Username</label>\r\n                <input type=\"text\" id=\"username\" name=\"username\" />\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" name=\"password\" />\r\n              </div>\r\n\r\n              <div className=\"login-btn-container\">\r\n                <button className=\"btn\" onClick={this.login}>\r\n                  Log in\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"footer\">\r\n                <SVG src={logo} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\nimport List from \"./List\";\r\nimport \"../css/Form.css\";\r\nimport { toastr } from \"react-redux-toastr\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.getGenders();\r\n    this.getLocations();\r\n    this.getStreams();\r\n    this.getStudyFields();\r\n\r\n    this.getUserLocation();\r\n  }\r\n\r\n  getUserLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(location => {\r\n        const c = location.coords;\r\n        const { locations } = this.state;\r\n\r\n        console.log(`Position is: ${c.latitude}, ${c.longitude} with accuracy: ${c.accuracy}`);\r\n\r\n        if (locations) {\r\n          locations.forEach(location => {\r\n            const d = this.distance(c, location);\r\n            console.log(`Distance to ${location.name} is ${d}`);\r\n          });\r\n        }\r\n      });\r\n    }\r\n    setTimeout(this.getUserLocation, 500);\r\n  };\r\n\r\n  distance = (coordFrom, coordTo) => {\r\n    const lat1 = coordFrom.latitude;\r\n    const lat2 = coordTo.latitude;\r\n    const lon1 = coordFrom.longitude;\r\n    const lon2 = coordTo.longitude;\r\n    const R = 6371; // km (change this constant to get miles)\r\n    const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n    const dLon = ((lon2 - lon1) * Math.PI) / 180;\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const d = R * c;\r\n    if (d > 1) return Math.round(d) + \"km\";\r\n    else if (d <= 1) return Math.round(d * 1000) + \"m\";\r\n    return d;\r\n  };\r\n\r\n  getGenders = () => {\r\n    fetch(\"/api/genders\")\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          console.error(\"Failed to get genders \", res.statusText);\r\n        }\r\n      })\r\n      .then(({ genders }) => {\r\n        this.setState({ genders });\r\n      });\r\n  };\r\n\r\n  getStudyFields = () => {\r\n    fetch(\"/api/studyFields\")\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          console.error(\"Failed to get genders \", res.statusText);\r\n        }\r\n      })\r\n      .then(({ studyFields }) => {\r\n        this.setState({ studyFields });\r\n      });\r\n  };\r\n\r\n  getStreams = () => {\r\n    fetch(\"/api/streams\")\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          console.error(\"Failed to get genders \", res.statusText);\r\n        }\r\n      })\r\n      .then(({ streams }) => {\r\n        this.setState({ streams });\r\n      });\r\n  };\r\n\r\n  getLocations = () => {\r\n    fetch(\"/api/locations\")\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          console.error(\"Failed to get genders \", res.statusText);\r\n        }\r\n      })\r\n      .then(({ locations }) => {\r\n        this.setState({ locations });\r\n      });\r\n  };\r\n\r\n  renderSelect = (id, labelText, defaultOptionText, list) => {\r\n    return (\r\n      <div className=\"field\">\r\n        <label htmlFor={id}>{labelText}:</label>\r\n        <select type=\"text\" id={id} name={id} disabled={list === undefined} defaultValue={3}>\r\n          {(() => {\r\n            if (list) {\r\n              return list.map(list => {\r\n                return (\r\n                  <option value={list.id} key={list.id + list.name}>\r\n                    {list.name}\r\n                  </option>\r\n                );\r\n              });\r\n            } else {\r\n              return <option key=\"loading\">Loading...</option>;\r\n            }\r\n          })()}\r\n\r\n          <option defaultValue key={\"default\" + labelText} value=\"-1\">\r\n            {\" \"}\r\n            {defaultOptionText}{\" \"}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  submit = event => {\r\n    if (document.getElementById(\"form\").checkValidity()) {\r\n      const firstName = document.getElementById(\"firstName\").value;\r\n      const lastName = document.getElementById(\"lastName\").value;\r\n      const GenderId = document.getElementById(\"gender\").value;\r\n      const email = document.getElementById(\"email\").value;\r\n      const mobile = document.getElementById(\"mobile\").value;\r\n      const StudyFieldId = document.getElementById(\"fieldOfStudy\").value;\r\n      const StreamId = document.getElementById(\"stream\").value;\r\n\r\n      fetch(\"/api/user\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ firstName, lastName, GenderId, email, mobile, StudyFieldId, StreamId })\r\n      })\r\n        .then(res => {\r\n          if (res.ok) {\r\n            return res.json();\r\n          } else {\r\n            console.error(\"Failed to submit form. \" + res.statusText);\r\n            toastr.error(\"\", \"Failed to submit form.\");\r\n          }\r\n        })\r\n        .then(data => {\r\n          if (data.success) {\r\n            toastr.success(\"\", \"Successfully submitted form with email: \" + email);\r\n            this.clear();\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  clear = e => {\r\n    e.preventDefault();\r\n    document.getElementById(\"firstName\").value = \"\";\r\n    document.getElementById(\"lastName\").value = \"\";\r\n    document.getElementById(\"gender\").value = \"-1\";\r\n    document.getElementById(\"email\").value = \"\";\r\n    document.getElementById(\"mobile\").value = \"\";\r\n    document.getElementById(\"fieldOfStudy\").value = \"-1\";\r\n    document.getElementById(\"stream\").value = \"-1\";\r\n    document.getElementById(\"privacyPolicy\").checked = false;\r\n  };\r\n\r\n  render() {\r\n    const { genders, streams, studyFields } = this.state;\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <form className=\"form-container\" id=\"form\" onSubmit={e => e.preventDefault()}>\r\n          <div className=\"form-header\">\r\n            <h1>DXC Beacon</h1>\r\n            <h2>Please fill out the fields below:</h2>\r\n            <h3>* required field</h3>\r\n          </div>\r\n\r\n          <div className=\"form-fields\">\r\n            <div className=\"field required\">\r\n              <label htmlFor=\"firstName\">First Name:</label>\r\n              <input type=\"text\" id=\"firstName\" name=\"firstName\" required />\r\n            </div>\r\n\r\n            <div className=\"field required\">\r\n              <label htmlFor=\"lastName\">Last Name:</label>\r\n              <input type=\"text\" id=\"lastName\" name=\"lastName\" required />\r\n            </div>\r\n\r\n            {this.renderSelect(\"gender\", \"Gender\", \"Select your gender\", genders)}\r\n\r\n            <div className=\"field required\">\r\n              <label htmlFor=\"email\">Email:</label>\r\n              <input type=\"email\" id=\"email\" name=\"email\" required />\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <label htmlFor=\"mobile\">Mobile Number:</label>\r\n              <input type=\"text\" id=\"mobile\" name=\"mobile\" />\r\n            </div>\r\n\r\n            {this.renderSelect(\"fieldOfStudy\", \"Field of Study\", \"Select the field you study\", studyFields)}\r\n\r\n            {this.renderSelect(\"stream\", \"Preferred Role\", \"Select the type of role you're interested in\", streams)}\r\n          </div>\r\n\r\n          <div className=\"privacy-policy\">\r\n            <label htmlFor=\"privacyPolicy\">\r\n              <span>\r\n                <input type=\"checkbox\" name=\"privacyPolicy\" id=\"privacyPolicy\" required />\r\n              </span>\r\n              <span className=\"privacy-text\">\r\n                I agree to DXC's <a href=\"#privacyPolicy\">Privacy Policy</a>\r\n              </span>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"btn-container\">\r\n            <button className=\"btn\" onClick={this.submit}>\r\n              Submit\r\n            </button>\r\n\r\n            <button className=\"btn clear-btn\" onClick={this.clear}>\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nclass List extends Component {\r\n  render() {\r\n      const {id, labelText, list} = this.props\r\n    return (\r\n      <div>\r\n        <label htmlFor={id}>{labelText}:</label>\r\n        <select type=\"text\" id={id} name={id} disabled={list === undefined}>\r\n          {() => {\r\n            if (list) {\r\n              return list.map(list => {\r\n                return <option value={list.id}>{list.name}</option>;\r\n              });\r\n            } else {\r\n              return <option>Loading...</option>;\r\n            }\r\n          }}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\nimport \"./css/libs/reboot.css\";\r\nimport \"./css/App.css\";\r\nimport 'react-redux-toastr/lib/css/react-redux-toastr.min.css'\r\nimport { Router } from \"@reach/router\";\r\nimport { Provider } from \"react-redux\";\r\nimport ReduxToastr from \"react-redux-toastr\";\r\n\r\nimport Login from \"./components/Login\";\r\nimport Form from \"./components/Form\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      credential: null\r\n    };\r\n  }\r\n\r\n  login = async credentials => {\r\n    return await fetch(\"http://localhost:3001/api/login\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(credentials)\r\n    })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          console.error(\"Failed to login.\");\r\n          return false;\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          this.setState({ credential: data.credential });\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        return false;\r\n      });\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Provider store={this.props.store}>\r\n        <div>\r\n          <Router>\r\n            <Login path=\"/\" login={this.login} />\r\n            <Form path=\"/form\" />\r\n          </Router>\r\n          <ReduxToastr\r\n            timeOut={4000}\r\n            newestOnTop={false}\r\n            preventDuplicates\r\n            position=\"bottom-center\"\r\n            getState={state => state.toastr} // This is the default\r\n            transitionIn=\"fadeIn\"\r\n            transitionOut=\"fadeOut\"\r\n            progressBar\r\n            closeOnToastrClick\r\n          />\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, combineReducers } from \"redux\";\r\nimport { reducer as toastrReducer } from \"react-redux-toastr\";\r\n\r\nconst reducers = {\r\n    toastr: toastrReducer\r\n  };\r\n  const reducer = combineReducers(reducers);\r\n  const store = createStore(reducer);\r\n\r\nReactDOM.render(<App store={store}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}